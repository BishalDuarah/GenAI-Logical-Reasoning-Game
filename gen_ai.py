# -*- coding: utf-8 -*-
"""Gen AI

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iU4CBjeei2muNxl6O6tPPjb-nbuXzF7C
"""

!pip install opendatasets

import opendatasets as od
od.download("https://www.kaggle.com/datasets/thedevastator/logical-reasoning-improvement-dataset")

import pandas as pd
data = pd.read_csv("/content/logical-reasoning-improvement-dataset/train.csv")

data.head()

!pip install transformers gradio

from transformers import pipeline, set_seed
import gradio as gr

# Load GPT-2 model
generator = pipeline('text-generation', model='gpt2')
set_seed(42)

# Function to generate logical reasoning question
def generate_question():
    prompt = "Generate a logical reasoning question:\nQuestion:"
    result = generator(prompt, max_length=80, num_return_sequences=1, temperature=0.9)
    question = result[0]['generated_text'].replace(prompt, "").strip()
    return question

# Placeholder for answer checking
def check_answer(user_answer):
    return f"‚úÖ Your answer '{user_answer}' has been recorded! (Auto-check coming soon)"

qa_pairs = [
    {
        "question": "What comes next in the sequence: 2, 4, 6, ?",
        "answer": "8",
        "type": "sequence"
    },
    {
        "question": "Which number does not belong: 3, 6, 9, 12, 15, 19?",
        "answer": "19",
        "type": "odd-one-out"
    },
    {
        "question": "If all bloops are razzies and all razzies are lazzies, are all bloops lazzies?",
        "answer": "Yes",
        "type": "logic"
    }
]

import random
from transformers import pipeline, set_seed
import gradio as gr

# GPT-2 for fun
generator = pipeline('text-generation', model='gpt2')
set_seed(42)

# Score and leaderboard
user_score = {"name": "Player", "score": 0}
leaderboard = []

# Categorized and difficulty-based question bank
qa_bank = {
    "easy": {
        "sequence": [
            {"question": "What comes next: 1, 2, 3, ?", "answer": "4"},
            {"question": "Complete: A, B, C, ?", "answer": "D"},
        ],
        "odd-one-out": [
            {"question": "Which does not belong: Dog, Cat, Apple?", "answer": "Apple"},
        ],
        "logic": [
            {"question": "Is the following true? All squares are rectangles. Answer Yes or No.", "answer": "Yes"},
        ]
    },
    "medium": {
        "sequence": [
            {"question": "What comes next: 2, 4, 6, ?", "answer": "8"},
        ],
        "odd-one-out": [
            {"question": "Find the odd one: Red, Blue, Circle", "answer": "Circle"},
        ],
        "logic": [
            {"question": "Tom is taller than Mike. Mike is taller than Jerry. Who is tallest?", "answer": "Tom"},
        ]
    },
    "hard": {
        "sequence": [
            {"question": "What comes next: 2, 6, 12, 20, ?", "answer": "30"},
        ],
        "odd-one-out": [
            {"question": "Which does not belong: 121, 144, 169, 181?", "answer": "181"},
        ],
        "logic": [
            {"question": "If all bloops are razzies and razzies are lazzies, are all bloops lazzies?", "answer": "Yes"},
        ]
    }
}

# Store current question
current_qa = {"question": None, "answer": None}

# Function to select question by difficulty and category
def generate_question(difficulty, category):
    qa = random.choice(qa_bank[difficulty][category])
    current_qa["question"] = qa["question"]
    current_qa["answer"] = qa["answer"]
    return qa["question"]

# GPT-2 generation (no answer check)
def generate_gpt2_question():
    prompt = "Generate a logical reasoning question:\nQuestion:"
    result = generator(prompt, max_length=80, num_return_sequences=1, temperature=0.9)
    current_qa["answer"] = None
    return result[0]['generated_text'].replace(prompt, "").strip()

# Check answer and update score
def check_answer(user_answer):
    if current_qa["answer"] is None:
        return "‚ö†Ô∏è Please select a question first!"
    correct = current_qa["answer"].strip().lower()
    user = user_answer.strip().lower()
    if user == correct:
        user_score["score"] += 1
        return f"‚úÖ Correct! Your score is now: {user_score['score']}"
    else:
        return f"‚ùå Incorrect. Correct answer: {current_qa['answer']}. Score: {user_score['score']}"

# Submit score to leaderboard
def submit_score(name):
    user_score["name"] = name
    leaderboard.append((name, user_score["score"]))
    leaderboard.sort(key=lambda x: x[1], reverse=True)
    return f"üéâ Score submitted as {name}! Current score: {user_score['score']}"

# Show leaderboard
def get_leaderboard():
    top = "\n".join([f"{i+1}. {name} - {score}" for i, (name, score) in enumerate(leaderboard[:5])])
    return top if top else "No scores yet!"

# Gradio UI
with gr.Blocks() as app:
    gr.Markdown("# üß† GenAI Logical Reasoning Game")
    gr.Markdown("Select difficulty & category or generate a GPT-2 creative question!")

    with gr.Row():
        difficulty = gr.Radio(["easy", "medium", "hard"], label="Select Difficulty", value="easy")
        category = gr.Radio(["sequence", "odd-one-out", "logic"], label="Select Type", value="sequence")
        generate_btn = gr.Button("üéØ Generate Question")
        gpt2_btn = gr.Button("‚ú® GPT-2 Question")

    question_display = gr.Textbox(label="Question", interactive=False)
    user_input = gr.Textbox(label="Your Answer")
    submit_btn = gr.Button("Submit Answer")
    feedback = gr.Textbox(label="Feedback", interactive=False)

    with gr.Row():
        name_input = gr.Textbox(label="Enter your name to save score")
        score_btn = gr.Button("üèÜ Submit Score")
        leaderboard_display = gr.Textbox(label="Leaderboard", interactive=False)

    # Bind logic
    generate_btn.click(fn=lambda d, c: generate_question(d, c), inputs=[difficulty, category], outputs=question_display)
    gpt2_btn.click(fn=generate_gpt2_question, outputs=question_display)
    submit_btn.click(fn=check_answer, inputs=user_input, outputs=feedback)
    score_btn.click(fn=submit_score, inputs=name_input, outputs=feedback)
    score_btn.click(fn=get_leaderboard, outputs=leaderboard_display)

app.launch()

import json
import os

leaderboard_file = "leaderboard.json"

# Load saved leaderboard
if os.path.exists(leaderboard_file):
    with open(leaderboard_file, "r") as f:
        leaderboard = json.load(f)

def submit_score(name):
    user_score["name"] = name
    leaderboard.append((name, user_score["score"]))
    leaderboard.sort(key=lambda x: x[1], reverse=True)
    with open(leaderboard_file, "w") as f:
        json.dump(leaderboard, f)
    return f"üéâ Score submitted as {name}! Current score: {user_score['score']}"

